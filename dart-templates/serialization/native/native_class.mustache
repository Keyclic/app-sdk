class {{classname}} {{#interfaces}}{{#-first}}implements {{/-first}}{{.}}{{^-last}}, {{/-last}} {{/interfaces}}{

{{>dart_constructor}}

  /// Returns a new [{{{classname}}}] instance and imports its values from
  /// [json] if it's non-null, null if [json] is null.
  factory {{{classname}}}.fromJson(Map<String, dynamic> json) {
    if (json == null) {
      return null;
    }

    {{#vars}}
    {{#isDateTime}}
        {{{datatype}}} {{{name}}} = json['{{{baseName}}}'] == null ? null : DateTime.parse(json[r'{{{baseName}}}']);
        if ({{{name}}} is DateTime && {{{name}}}.isUtc == false) {
          {{=<< >>=}}
            <<name>> = DateTime.parse('${json[r'<<baseName>>']}Z');
          <<={{ }}=>>
        }

      {{/isDateTime}}
    {{/vars}}

  return {{{classname}}}(
  {{#vars}}
  {{#isDateTime}}
        {{{name}}}: {{{name}}},
  {{/isDateTime}}
  {{#isDate}}
        {{{name}}}: json[r'{{{baseName}}}'] == null
          ? null
          : DateTime.parse(json[r'{{{baseName}}}']),
  {{/isDate}}
  {{^isDateTime}}
  {{^isDate}}
    {{#complexType}}
      {{#isArray}}
        {{#items.isArray}}
        {{{name}}}:
            {{#items.complexType}}
                {{items.complexType}}.listFromJson(json[r'{{{baseName}}}'] ?? []),
            {{/items.complexType}}
            {{^items.complexType}}
                List.from(json[r'{{{baseName}}}'] ?? []).map((e) => List<{{items.items.dataType}}>.from(e ?? [])).toList(growable: false),
            {{/items.complexType}}
        {{/items.isArray}}
        {{^items.isArray}}
        {{{name}}}: {{{complexType}}}.listFromJson(json[r'{{{baseName}}}']),
        {{/items.isArray}}
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
          {{#items.isArray}}
        {{{name}}}: 
            {{#items.complexType}}
                {{items.complexType}}.mapListFromJson(json[r'{{{baseName}}}'] ?? {}),
            {{/items.complexType}}
            {{^items.complexType}}
                Map<String, List>.from(json[r'{{{baseName}}}'] ?? {}),
            {{/items.complexType}}
          {{/items.isArray}}
          {{^items.isArray}}
              {{#items.isMap}}
        {{{name}}}:
            {{#items.complexType}}
                {{items.complexType}}.mapFromJson(json[r'{{{baseName}}}'] ?? {}),
            {{/items.complexType}}
            {{^items.complexType}}
                Map<String, Map>.from(json[r'{{{baseName}}}'] ?? {}),
            {{/items.complexType}}
          {{/items.isMap}}
          {{^items.isMap}}
            {{{name}}}: json[r'{{{baseName}}}'],
          {{/items.isMap}}
          {{/items.isArray}}
        {{/isMap}}
        {{^isMap}}
            {{#isBinary}}
        {{{name}}}: null, // No support for decoding binary content from JSON
            {{/isBinary}}
            {{^isBinary}}
        {{{name}}}: {{{complexType}}}.fromJson(json[r'{{{baseName}}}']),
            {{/isBinary}}
        {{/isMap}}
      {{/isArray}}
    {{/complexType}}
    {{^complexType}}
      {{#isArray}}
        {{#isEnum}}
        {{{name}}}: {{{items.datatypeWithEnum}}}.listFromJson(json[r'{{{baseName}}}']),
        {{/isEnum}}
        {{^isEnum}}
        {{{name}}}: {{#uniqueItems}}Set{{/uniqueItems}}{{^uniqueItems}}List{{/uniqueItems}}<{{{items.datatype}}}>.from(json[r'{{{baseName}}}'] ?? []),
        {{/isEnum}}
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
        {{{name}}}: json[r'{{{baseName}}}'] == null ?
          null :
          Map<String, {{{items.datatype}}}>.from(json[r'{{{baseName}}}']),
        {{/isMap}}
        {{^isMap}}
          {{#isNumber}}
        {{{name}}}: json[r'{{{baseName}}}'] == null ?
          null :
          json[r'{{{baseName}}}'].toDouble(),
          {{/isNumber}}
          {{^isNumber}}
            {{#isEnum}}
              {{{name}}}: {{{enumName}}}.fromJson(json[r'{{{baseName}}}']),
            {{/isEnum}}
            {{^isEnum}}
              {{#isFreeFormObject}}
                {{{name}}}: json[r'{{{baseName}}}'] == null ?
                null :
                Map<String, dynamic>.from(json[r'{{{baseName}}}']),
              {{/isFreeFormObject}}
              {{^isFreeFormObject}}
                {{{name}}}: json[r'{{{baseName}}}'],
              {{/isFreeFormObject}}
            {{/isEnum}}
          {{/isNumber}}
        {{/isMap}}
      {{/isArray}}
    {{/complexType}}
  {{/isDate}}
  {{/isDateTime}}
  {{/vars}}
    );
  }

  {{#vars}}
  {{#description}}
  /// {{{description}}}
  {{/description}}
  {{^isEnum}}
    {{#minimum}}
  // minimum: {{{minimum}}}
    {{/minimum}}
    {{#maximum}}
  // maximum: {{{maximum}}}
    {{/maximum}}
  {{/isEnum}}
  {{#isFreeFormObject}}
    Map<String, dynamic> {{{name}}};
  {{/isFreeFormObject}}
  {{^isFreeFormObject}}
    {{{datatypeWithEnum}}} {{{name}}};
  {{/isFreeFormObject}}

  {{/vars}}
  @override
  bool operator ==(Object other) {
    // Same reference
    if (identical(this, other)) {
      return true;
    }

    return other is {{{classname}}} {{#vars}}
        {{#isContainer}}
          && DeepCollectionEquality.unordered().equals({{name}}, other.{{name}})
        {{/isContainer}}
        {{^isContainer}}
          && other.{{{name}}} == {{{name}}}
        {{/isContainer}}
  {{/vars}};
  }
  

  @override
  int get hashCode =>
  {{#vars}}
    ({{{name}}} == null ? 0 : {{{name}}}.hashCode){{^-last}} +{{/-last}}{{#-last}};{{/-last}}
  {{/vars}}

  static List<{{{classname}}}> listFromJson(List<dynamic> json) {
    return <{{{classname}}}>[
      if (json is List)
        for (dynamic value in json) {{{classname}}}.fromJson(value),
    ];
  }

  static Map<String, {{{classname}}}> mapFromJson(Map<String, dynamic> json) {
    return <String, {{{classname}}}>{
      if (json is Map)
        for (final entry in json.entries) entry.key: {{{classname}}}.fromJson(entry.value),
    };
  }

  // maps a json object with a list of {{{classname}}}-objects as value to a dart map
  static Map<String, List<{{{classname}}}>> mapListFromJson(Map<String, dynamic> json) {
    return <String, List<{{{classname}}}>>{
      if (json is Map)
       for (final entry in json.entries) entry.key: {{{classname}}}.listFromJson(entry.value),
    };
  }

  @override
  String toString() => '{{{classname}}}[{{#vars}}{{{name}}}=${{{name}}}{{^-last}}, {{/-last}}{{/vars}}]';

  Map<String, dynamic> toJson() {
    return <String, dynamic>{
  {{#vars}}
    {{^required}}
    if ({{{name}}} != null)
    {{/required}}
    {{#isDateTime}}
      {{#pattern}}
      r'{{{baseName}}}': {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}.millisecondsSinceEpoch
        : {{{name}}}.toUtc().toIso8601String(),
      {{/pattern}}
      {{^pattern}}
      r'{{{baseName}}}': {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}{{{name}}}.toUtc().toIso8601String(),
      {{/pattern}}
    {{/isDateTime}}
    {{#isDate}}
      {{#pattern}}
      r'{{{baseName}}}': {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateEpochMarker == '{{{pattern}}}'
        ? {{{name}}}.millisecondsSinceEpoch
        : _dateFormatter.format({{{name}}}.toUtc()),
      {{/pattern}}
      {{^pattern}}
      r'{{{baseName}}}': {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}_dateFormatter.format({{{name}}}.toUtc()),
      {{/pattern}}
    {{/isDate}}
    {{^isDateTime}}
      {{^isDate}}
      r'{{{baseName}}}': {{#required}}{{#isNullable}}{{{name}}} == null ? null : {{/isNullable}}{{/required}}{{{name}}},
      {{/isDate}}
    {{/isDateTime}}
    {{^required}}

    {{/required}}
  {{/vars}}
    };
  }
}
{{#vars}}
    {{#isEnum}}
        {{^isContainer}}

{{>serialization/native/native_enum_inline}}
        {{/isContainer}}
        {{#isContainer}}
            {{#mostInnerItems}}

{{>serialization/native/native_enum_inline}}
            {{/mostInnerItems}}
        {{/isContainer}}
    {{/isEnum}}
{{/vars}}