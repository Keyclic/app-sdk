/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: techies@keyclic.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import ApiClient from '../ApiClient';
import FeedbackEmbedded from './FeedbackEmbedded';
import FeedbackGeoCoordinates from './FeedbackGeoCoordinates';
import FeedbackLinks from './FeedbackLinks';


    

/**
 * The Feedback model module.
 * @module model/Feedback
 * @version 1.0
 */
export default class Feedback  {
    /**
     * Constructs a new "Feedback".
     * @alias module:model/Feedback
     * @class
    
     * @param id { String } 
    
     */
    constructor(
    
        id,
    
    ) {

        this.description = null;
        this.geoCoordinates = null;
        this.id = id;
        this.createdAt = null;
        this.type = null;
        this.state = [];
        this.links = null;
        this.embedded = null;

        this.geoCoordinatesType = FeedbackGeoCoordinates;
        this.linksType = FeedbackLinks;
        this.embeddedType = FeedbackEmbedded;
    }

    /**
    * Constructs a "Feedback" from a plain JavaScript object.
    * @param { object } data The plain JavaScript object bearing properties of interest.
    * @param { module:model/Feedback } type Optional instance to populate.
    * @return { module:model/Feedback } The populated "Feedback" instance.
    */
    static constructFromObject(
        data,
        type = Feedback,
    ) {
        if (data === null) {
            throw new Error('No data to build object');
        }


        let object = new type();

        if (data.hasOwnProperty('description')) {
            object.description = ApiClient.convertToType(data['description'], 'String');
        }
        if (data.hasOwnProperty('geoCoordinates')) {
            object.geoCoordinates = ApiClient.convertToType(data['geoCoordinates'], object.geoCoordinatesType);
        }
        if (data.hasOwnProperty('id')) {
            object.id = ApiClient.convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('createdAt')) {
            object.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
        }
        if (data.hasOwnProperty('type')) {
            object.type = ApiClient.convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('state')) {
            object.state = ApiClient.convertToType(data['state'], '[\'String\']');
        }
        if (data.hasOwnProperty('_links')) {
            object.links = ApiClient.convertToType(data['_links'], object.linksType);
        }
        if (data.hasOwnProperty('_embedded')) {
            object.embedded = ApiClient.convertToType(data['_embedded'], object.embeddedType);
        }

        return object;

    }

    

}



