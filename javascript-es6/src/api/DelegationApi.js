/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *  <techies@keyclic.com>
 *
 * This class is auto generated by the swagger code generator program with proper templates of Keyclic.
 * https://github.com/swagger-api/swagger-codegen.git
 * https://github.com/Keyclic/app-sdk.git
 * Do not edit the class manually.
 */

import ApiClient from "../ApiClient";
import Delegation from "../model/Delegation";
import DelegationData from "../model/DelegationData";
import DelegationWorkflowTransitionData from "../model/DelegationWorkflowTransitionData";
import Error from "../model/Error";

/**
 * Delegation service.
 * @module api/DelegationApi
 */
export default class DelegationApi extends ApiClient {
  /**
   * @class
   * { string } basePath To override basePath.
   * { object } headers Additional headers for the instance.
   * { int } timeout Number in seconds before timeout.
   */
  constructor(basePath = null, headers = null, timeout = null) {
    super(basePath, headers, timeout);
  }

  /**
   * Retrieve one Delegation resource.
   * @param { String } xKeyclicApp
   * @param { String } delegation The identifier of the resource.
   * @param { Object } credentials The required credentials with good properties to use different types of authentication.
   * @param { Delegation }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
   * @param { module:model/String } acceptLanguage   (default to fr-FR)
   * @param { Date } xDateTime
   * @param { String } xKeyclicAppVersion
   */
  getDelegation(returnType = null, options, credentials = null) {
    if (returnType === null) {
      returnType = Delegation;
    }

    let {
      xKeyclicApp,
      delegation,
      acceptLanguage,
      xDateTime,
      xKeyclicAppVersion
    } = options;

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === "undefined" || xKeyclicApp === null) {
      throw new window.Error(
        'Missing the required parameter "xKeyclicApp" when calling getDelegation'
      );
    }

    // verify the required parameter 'delegation' is set
    if (typeof delegation === "undefined" || delegation === null) {
      throw new window.Error(
        'Missing the required parameter "delegation" when calling getDelegation'
      );
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === "undefined" || acceptLanguage === null) {
      acceptLanguage = "fr-FR";
    }

    // verify the null value of parameter 'xDateTime'
    if (typeof xDateTime === "undefined") {
      xDateTime = null;
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === "undefined") {
      xKeyclicAppVersion = null;
    }

    const pathParams = {
      delegation: delegation
    };

    const bodyParam = null;

    const queryParams = {};

    let headerParams = {
      "accept-language": acceptLanguage,
      "x-date-time": xDateTime,
      "x-keyclic-app": xKeyclicApp,
      "x-keyclic-app-version": xKeyclicAppVersion
    };

    const credentialParams = credentials;

    let authNames = ["bearer"];

    let contentTypes = ["application/json;charset=UTF-8"];

    let accepts = ["application/hal+json;charset=UTF-8"];

    return this.callApi(
      "/delegations/{delegation}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    );
  }

  /**
   * Create one Delegation resource.
   * @param { String } xKeyclicApp
   * @param { module:model/DelegationData } delegationData
   * @param { Object } credentials The required credentials with good properties to use different types of authentication.
   * @param { Delegation }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
   * @param { module:model/String } acceptLanguage   (default to fr-FR)
   * @param { Date } xDateTime
   * @param { String } xKeyclicAppVersion
   */
  postDelegation(returnType = null, options, credentials = null) {
    if (returnType === null) {
      returnType = Delegation;
    }

    let {
      xKeyclicApp,
      delegationData,
      acceptLanguage,
      xDateTime,
      xKeyclicAppVersion
    } = options;

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === "undefined" || xKeyclicApp === null) {
      throw new window.Error(
        'Missing the required parameter "xKeyclicApp" when calling postDelegation'
      );
    }

    // verify the required parameter 'delegationData' is set
    if (typeof delegationData === "undefined" || delegationData === null) {
      throw new window.Error(
        'Missing the required parameter "delegationData" when calling postDelegation'
      );
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === "undefined" || acceptLanguage === null) {
      acceptLanguage = "fr-FR";
    }

    // verify the null value of parameter 'xDateTime'
    if (typeof xDateTime === "undefined") {
      xDateTime = null;
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === "undefined") {
      xKeyclicAppVersion = null;
    }

    const pathParams = {};

    const bodyParam = delegationData;

    const queryParams = {};

    let headerParams = {
      "accept-language": acceptLanguage,
      "x-date-time": xDateTime,
      "x-keyclic-app": xKeyclicApp,
      "x-keyclic-app-version": xKeyclicAppVersion
    };

    const credentialParams = credentials;

    let authNames = ["bearer"];

    let contentTypes = ["application/json;charset=UTF-8"];

    let accepts = ["application/hal+json;charset=UTF-8"];

    return this.callApi(
      "/delegations",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    );
  }

  /**
   * Create one Workflow resource.
   * @param { String } xKeyclicApp
   * @param { module:model/DelegationWorkflowTransitionData } delegationWorkflowTransitionData
   * @param { String } delegation The identifier of the resource.
   * @param { Object } credentials The required credentials with good properties to use different types of authentication.
   * @param { Delegation }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
   * @param { module:model/String } acceptLanguage   (default to fr-FR)
   * @param { Date } xDateTime
   * @param { String } xKeyclicAppVersion
   */
  postWorkflowByDelegation(returnType = null, options, credentials = null) {
    if (returnType === null) {
      returnType = Delegation;
    }

    let {
      xKeyclicApp,
      delegationWorkflowTransitionData,
      delegation,
      acceptLanguage,
      xDateTime,
      xKeyclicAppVersion
    } = options;

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === "undefined" || xKeyclicApp === null) {
      throw new window.Error(
        'Missing the required parameter "xKeyclicApp" when calling postWorkflowByDelegation'
      );
    }

    // verify the required parameter 'delegationWorkflowTransitionData' is set
    if (
      typeof delegationWorkflowTransitionData === "undefined" ||
      delegationWorkflowTransitionData === null
    ) {
      throw new window.Error(
        'Missing the required parameter "delegationWorkflowTransitionData" when calling postWorkflowByDelegation'
      );
    }

    // verify the required parameter 'delegation' is set
    if (typeof delegation === "undefined" || delegation === null) {
      throw new window.Error(
        'Missing the required parameter "delegation" when calling postWorkflowByDelegation'
      );
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === "undefined" || acceptLanguage === null) {
      acceptLanguage = "fr-FR";
    }

    // verify the null value of parameter 'xDateTime'
    if (typeof xDateTime === "undefined") {
      xDateTime = null;
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === "undefined") {
      xKeyclicAppVersion = null;
    }

    const pathParams = {
      delegation: delegation
    };

    const bodyParam = delegationWorkflowTransitionData;

    const queryParams = {};

    let headerParams = {
      "accept-language": acceptLanguage,
      "x-date-time": xDateTime,
      "x-keyclic-app": xKeyclicApp,
      "x-keyclic-app-version": xKeyclicAppVersion
    };

    const credentialParams = credentials;

    let authNames = ["bearer"];

    let contentTypes = ["application/json;charset=UTF-8"];

    let accepts = ["application/hal+json;charset=UTF-8"];

    return this.callApi(
      "/delegations/{delegation}/workflow",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    );
  }
}
