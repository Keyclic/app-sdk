part of {{pubName}}.api;

{{#operations}}
class {{classname}} {
  {{classname}}([ApiClient apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;

  {{#operation}}
  /// {{summary}}
  ///
  /// {{notes}}
  Future<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {{nickname}}(
    {{#allParams}}{{#required}}{{{dataType}}} {{paramName}},{{/required}}{{/allParams}}
    {{#hasOptionalParams}}{
      {{#allParams}}{{^required}}{{{dataType}}} {{paramName}},{{/required}}{{/allParams}}
    }{{/hasOptionalParams}}
  ) async {
    // verify required params are set
    {{#allParams}}{{#required}}
    if ({{paramName}} == null) {
     throw ApiException(0, "Missing required param: {{paramName}}");
    }
    {{/required}}{{/allParams}}

    // create path and map variables
    String path = "{{{path}}}".replaceAll("{format}","json"){{#pathParams}}.replaceAll("{" + "{{baseName}}" + "}", {{{paramName}}}.toString()){{/pathParams}};

    // query params
    List<QueryParam> queryParams = [];
    {{#queryParams}}
    {{^required}}
    if ({{paramName}} != null) {
    {{/required}}
      queryParams.addAll(_convertParametersForCollectionFormat("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
    {{^required}}
    }
    {{/required}}
    {{/queryParams}}

    // header params
    Map<String, String> headerParams = {};
    {{#headerParams}}
    headerParams["{{baseName}}"] = {{paramName}};
    {{/headerParams}}

    List<String> contentTypes = [{{#consumes}}"{{{mediaType}}}"{{#hasMore}},{{/hasMore}}{{/consumes}}];

    String contentType = contentTypes.isEmpty ? "application/json" : contentTypes[0];
    List<String> authNames = [{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}];

    Object postBody{{#bodyParam}} = {{paramName}}{{/bodyParam}};

    var response = await apiClient.invokeAPI(path,
                                             '{{httpMethod}}',
                                             queryParams,
                                             postBody,
                                             headerParams,
                                             contentType,
                                             authNames);

    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, response.body);
    }

    if (response.body == null) {
      return {{#returnType}}null{{/returnType}};
    }

    return
      {{#isListContainer}}
        {{#returnType}}(apiClient.deserialize(response.body, '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();{{/returnType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{#returnType}}{{{returnType}}}.from(apiClient.deserialize(response.body, '{{{returnType}}}')) {{/returnType}};
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{#returnType}}apiClient.deserialize(response.body, '{{{returnType}}}') as {{{returnType}}} {{/returnType}};
        {{/isMapContainer}}
      {{/isListContainer}}
  }
  {{/operation}}
}
{{/operations}}
