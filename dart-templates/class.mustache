class {{classname}} {{#interfaces}}extends {{interfaces.0}} {{/interfaces}}{
  {{classname}}({ {{#vars}}this.{{name}},{{/vars}} });

  {{classname}}.fromJson(Map<String, dynamic> json) {
    if (json == null) {
      return;
    }
    {{#vars}}
      {{#isDateTime}}
        {{name}} = json['{{baseName}}'] == null ? null : DateTime.parse(json['{{baseName}}']);
        if ({{name}} is DateTime && {{name}}.isUtc == false) {
          {{=<< >>=}}
            <<name>> = DateTime.parse('${<<name>>.toIso8601String()}Z');
          <<={{ }}=>>
        }
      {{/isDateTime}}
      {{^isDateTime}}
        {{#complexType}}
          {{#isListContainer}}
            {{name}} = {{complexType}}.listFromJson(json['{{baseName}}']);
          {{/isListContainer}}
          {{^isListContainer}}
            {{#isMapContainer}}
              {{name}} = {{complexType}}.mapFromJson(json['{{baseName}}']);
            {{/isMapContainer}}
            {{^isMapContainer}}
              {{name}} = {{complexType}}.fromJson(json['{{baseName}}']);
            {{/isMapContainer}}
          {{/isListContainer}}
        {{/complexType}}
        {{^complexType}}
          {{#isListContainer}}
            {{name}} = (json['{{baseName}}'] as List)?.map((item) => item as {{items.datatype}})?.toList();
          {{/isListContainer}}
          {{^isListContainer}}
            {{! Double type in dart must have a point separator (0 must be cast in 0.0) }}
            {{#isFloat}}
              {{name}} = json['{{baseName}}']?.toDouble();
            {{/isFloat}}
            {{^isFloat}}
              {{name}} = json['{{baseName}}'];
            {{/isFloat}}
          {{/isListContainer}}
        {{/complexType}}
      {{/isDateTime}}
    {{/vars}}
  }

  {{#vars}}
    {{#description}}/* {{{description}}} */{{/description}}
    {{#allowableValues}}
      {{#min}}/// range from {{min}} to {{max}}{{/min}}
      {{^min}}/// enum {{name}}Enum { {{#values}} {{.}}, {{/values}} };{{/min}}
    {{/allowableValues}}
    {{{datatype}}} {{name}};
  {{/vars}}

  @override
  bool operator==(dynamic other) {
    if (identical(this, other)) {
      return true;
    }

    return other is {{classname}} && runtimeType == other.runtimeType
    {{#requiredVars}}
      {{#isContainer}}
         && DeepCollectionEquality.unordered().equals({{name}}, other.{{name}})
      {{/isContainer}}
      {{^isContainer}}
         && {{name}} == other.{{name}}
      {{/isContainer}}
    {{/requiredVars}};
  }

  @override
  int get hashCode => 0{{#requiredVars}}{{^isContainer}} ^ {{name}}.hashCode{{/isContainer}}{{/requiredVars}};

  static List<{{classname}}> listFromJson(List<dynamic> json) {
    return json == null ? List<{{classname}}>() : json.map((value) => {{classname}}.fromJson(value)).toList();
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, dynamic> json) {
    var map = Map<String, {{classname}}>();
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) => map[key] = {{classname}}.fromJson(value));
    }
    return map;
  }

  Map<String, dynamic> toJson() {
    return {
      {{#vars}}
        {{#isDateTime}}
            '{{{baseName}}}': {{name}} == null ? '' : {{name}}.toUtc().toIso8601String(),
        {{/isDateTime}}
        {{^isDateTime}}
            '{{{baseName}}}': {{name}},
        {{/isDateTime}}
    {{/vars}}
    };
  }

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{name}}=${{name}}, {{/vars}}]';
  }
}
