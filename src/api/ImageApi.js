/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: techies@keyclic.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ApiClient from '../ApiClient';
import Error from '../model/Error';
import Feedback from '../model/Feedback';
import ImageData from '../model/ImageData';
import Operation from '../model/Operation';

/**
 * Image service.
 * @module api/ImageApi
 * @version 1.0
 */
export default class ImageApi extends ApiClient {
    /**
     * @class
     * { string } basePath To override basePath.
     * { object } headers Additional headers for the instance.
     * { int } timeout Number in seconds before timeout.
     */
    constructor(
        basePath = null,
        headers = null,
        timeout = null
    ) {
        super(basePath, headers, timeout);
    }

    /**
     * Remove one Image resource.
     * @param { String } xKeyclicApp
     * @param { String } operation The identifier of the resource formatted as GUID string.
     * @param { String } image The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Object } returnType The required type to return; can be a string for simple types or the constructor for a complex type (default to null).
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     */
    deleteImageByOperationAndImage(
        returnType = null,
        options,
        credentials,
    ) {

        let {
            xKeyclicApp,
            operation,
            image,
            acceptLanguage,
            xKeyclicAppVersion,
        } = options;


        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling deleteImageByOperationAndImage');
        }

        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new window.Error('Missing the required parameter "operation" when calling deleteImageByOperationAndImage');
        }

        // verify the required parameter 'image' is set
        if (typeof image === 'undefined' || image === null) {
            throw new window.Error('Missing the required parameter "image" when calling deleteImageByOperationAndImage');
        }



        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }



        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }


        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling deleteImageByOperationAndImage');
        }

        let pathParams = {
            'operation': operation,
            'image': image,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/operations/{operation}/images/{image}',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve one Image resource.
     * @param { String } xKeyclicApp
     * @param { String } feedback The identifier of the resource formatted as GUID string.
     * @param { String } image The identifier of the resource formatted as GUID string.
     * @param { String } width
     * @param { String } height
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { File }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     */
    getImageByFeedbackAndImageAndWidthAndHeight(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = File;
        }

        let {
            xKeyclicApp,
            feedback,
            image,
            width,
            height,
            acceptLanguage,
            xKeyclicAppVersion,
        } = options;


        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling getImageByFeedbackAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'feedback' is set
        if (typeof feedback === 'undefined' || feedback === null) {
            throw new window.Error('Missing the required parameter "feedback" when calling getImageByFeedbackAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'image' is set
        if (typeof image === 'undefined' || image === null) {
            throw new window.Error('Missing the required parameter "image" when calling getImageByFeedbackAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'width' is set
        if (typeof width === 'undefined' || width === null) {
            throw new window.Error('Missing the required parameter "width" when calling getImageByFeedbackAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'height' is set
        if (typeof height === 'undefined' || height === null) {
            throw new window.Error('Missing the required parameter "height" when calling getImageByFeedbackAndImageAndWidthAndHeight');
        }



        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }



        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }


        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling getImageByFeedbackAndImageAndWidthAndHeight');
        }

        let pathParams = {
            'feedback': feedback,
            'image': image,
            'width': width,
            'height': height,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/feedbacks/{feedback}/images/{image}/{width}/{height}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve one Image resource.
     * @param { String } xKeyclicApp
     * @param { String } operation The identifier of the resource formatted as GUID string.
     * @param { String } image The identifier of the resource formatted as GUID string.
     * @param { String } width
     * @param { String } height
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { File }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     */
    getImageByOperationAndImageAndWidthAndHeight(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = File;
        }

        let {
            xKeyclicApp,
            operation,
            image,
            width,
            height,
            acceptLanguage,
            xKeyclicAppVersion,
        } = options;


        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling getImageByOperationAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new window.Error('Missing the required parameter "operation" when calling getImageByOperationAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'image' is set
        if (typeof image === 'undefined' || image === null) {
            throw new window.Error('Missing the required parameter "image" when calling getImageByOperationAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'width' is set
        if (typeof width === 'undefined' || width === null) {
            throw new window.Error('Missing the required parameter "width" when calling getImageByOperationAndImageAndWidthAndHeight');
        }

        // verify the required parameter 'height' is set
        if (typeof height === 'undefined' || height === null) {
            throw new window.Error('Missing the required parameter "height" when calling getImageByOperationAndImageAndWidthAndHeight');
        }



        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }



        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }


        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling getImageByOperationAndImageAndWidthAndHeight');
        }

        let pathParams = {
            'operation': operation,
            'image': image,
            'width': width,
            'height': height,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/operations/{operation}/images/{image}/{width}/{height}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve one Image resource.
     * @param { String } xKeyclicApp
     * @param { String } person The identifier of the resource formatted as GUID string.
     * @param { String } width
     * @param { String } height
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { File }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     */
    getImageByPersonAndWidthAndHeight(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = File;
        }

        let {
            xKeyclicApp,
            person,
            width,
            height,
            acceptLanguage,
            xKeyclicAppVersion,
        } = options;


        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling getImageByPersonAndWidthAndHeight');
        }

        // verify the required parameter 'person' is set
        if (typeof person === 'undefined' || person === null) {
            throw new window.Error('Missing the required parameter "person" when calling getImageByPersonAndWidthAndHeight');
        }

        // verify the required parameter 'width' is set
        if (typeof width === 'undefined' || width === null) {
            throw new window.Error('Missing the required parameter "width" when calling getImageByPersonAndWidthAndHeight');
        }

        // verify the required parameter 'height' is set
        if (typeof height === 'undefined' || height === null) {
            throw new window.Error('Missing the required parameter "height" when calling getImageByPersonAndWidthAndHeight');
        }



        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }



        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }


        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling getImageByPersonAndWidthAndHeight');
        }

        let pathParams = {
            'person': person,
            'width': width,
            'height': height,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/people/{person}/image/{width}/{height}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Create one Image resource.
     * @param { String } xKeyclicApp
     * @param { String } feedback The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Feedback }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     * @param { module:model/ImageData } imageData
     */
    postImageByFeedback(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = Feedback;
        }

        let {
            xKeyclicApp,
            feedback,
            acceptLanguage,
            xKeyclicAppVersion,
            imageData,
        } = options;


        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling postImageByFeedback');
        }

        // verify the required parameter 'feedback' is set
        if (typeof feedback === 'undefined' || feedback === null) {
            throw new window.Error('Missing the required parameter "feedback" when calling postImageByFeedback');
        }



        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }



        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }

        // verify the null value of parameter 'imageData'
        if (typeof imageData === 'undefined') {
            imageData = null;
        }


        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling postImageByFeedback');
        }

        let pathParams = {
            'feedback': feedback,
        };

        let bodyParam = imageData;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/feedbacks/{feedback}/images',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Create one Image resource.
     * @param { String } xKeyclicApp
     * @param { String } operation The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Operation }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     * @param { module:model/ImageData } imageData
     */
    postImageByOperation(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = Operation;
        }

        let {
            xKeyclicApp,
            operation,
            acceptLanguage,
            xKeyclicAppVersion,
            imageData,
        } = options;


        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling postImageByOperation');
        }

        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new window.Error('Missing the required parameter "operation" when calling postImageByOperation');
        }



        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }



        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }

        // verify the null value of parameter 'imageData'
        if (typeof imageData === 'undefined') {
            imageData = null;
        }


        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling postImageByOperation');
        }

        let pathParams = {
            'operation': operation,
        };

        let bodyParam = imageData;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/operations/{operation}/images',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

}
