/**
 * Keyclic API Reference
 * The Keyclic API is build around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer). <br/> Our API has resource oriented URLs and uses HTTP response codes to indicate API errors. We support CQRS and all API accesses are performed over HTTPS, allowing you to interact securely with our API from a client-side web application.<br/><br/> **Authentication** <br/> Authentication is performed thought [JSON Web Tokens](https://jwt.io). <br/> JSON Web Tokens are an open industry standard RFC 7519 method for representing claims securely between two parties.<br/>There are many [open source projects](https://auth0.com/opensource) built around JWT in several programming languages that you can use in your application.<br/><br/>**Errors** <br/>We uses conventional HTTP response codes to indicate the success or failure of an API request, errors are represented as JSON objects following the [vnd.error](https://github.com/blongden/vnd.error) standard.<br/><br/>**Integration**<br/>To make the API integration easy as possible we have a sandbox environment to interact securely with our API.
 *
 * OpenAPI spec version: 1.12.1
 * Contact: techies@keyclic.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticationSuccess from '../model/AuthenticationSuccess';
import Error from '../model/Error';
import Person from '../model/Person';
import SecurityLoginBody from '../model/SecurityLoginBody';
import SecurityOauthFacebookBody from '../model/SecurityOauthFacebookBody';

/**
 * Security service.
 * @module api/SecurityApi
 * @version 1.12.1
 */
export default class SecurityApi extends ApiClient {
    /**
     * Constructs a new SecurityApi.
     * 
     * @alias module:api/SecurityApi
     * @class
     * @param {module:ApiClient} apiClient Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(
        basePath = null,
        headers = null,
        timeout = null
    ) {
        super(basePath, headers, timeout);
    }


    /**
     * Login.
     * @param {module:model/SecurityLoginBody} body 
     * @param {AuthenticationSuccess} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    post(
        body,
        returnType = AuthenticationSuccess,
    ) {
        // verify the required parameter 'body' is set
        if (typeof body === 'undefined' || body === null) {
            throw new Error('Missing the required parameter "body" when calling post');
        }


        let pathParams = {
        };

        let bodyParam = body;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = null;

        let authNames = [
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/security/login',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Oauth Facebook.
     * @param {module:model/SecurityOauthFacebookBody} accessToken 
     * @param {AuthenticationSuccess} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    postFacebook(
        accessToken,
        returnType = AuthenticationSuccess,
    ) {
        // verify the required parameter 'accessToken' is set
        if (typeof accessToken === 'undefined' || accessToken === null) {
            throw new Error('Missing the required parameter "accessToken" when calling postFacebook');
        }


        let pathParams = {
        };

        let bodyParam = accessToken;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = null;

        let authNames = [
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/security/oauth/facebook',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Change password.
     * @param {String} token 
     * @param {Object} returnType The required type to return; can be a string for simple types or the constructor for a complex type (default to null).
     * @param {String} password  
     */
    postPassword(
        token,
        returnType = null,
        password = null,
    ) {
        // verify the required parameter 'token' is set
        if (typeof token === 'undefined' || token === null) {
            throw new Error('Missing the required parameter "token" when calling postPassword');
        }


        let pathParams = {
            'token': token,
        };

        let bodyParam = password;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = null;

        let authNames = [
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/security/password/change/{token}',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Send a change password request for the logged in person.
     * @param {Object} returnType The required type to return; can be a string for simple types or the constructor for a complex type (default to null).
     * @param {String} email  
     */
    postPasswordRequest(
        returnType = null,
        email = null,
    ) {


        let pathParams = {
        };

        let bodyParam = email;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = null;

        let authNames = [
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/security/password/change-request',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Register a new person.
     * @param {String} xKeyclicApp The application token.
     * @param {module:model/Person} body 
     * @param {Object} returnType The required type to return; can be a string for simple types or the constructor for a complex type (default to null).
     */
    postRegister(
        xKeyclicApp,
        body,
        returnType = null,
    ) {
        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new Error('Missing the required parameter "xKeyclicApp" when calling postRegister');
        }
        // verify the required parameter 'body' is set
        if (typeof body === 'undefined' || body === null) {
            throw new Error('Missing the required parameter "body" when calling postRegister');
        }


        let pathParams = {
        };

        let bodyParam = body;

        let queryParams = {
        };

        let headerParams = {
            'x-keyclic-app': xKeyclicApp,
        };

        let formParams = {
        };

        let credentialParams = null;

        let authNames = [
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/security/register',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

}
