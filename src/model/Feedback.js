/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *  <techies@keyclic.com>
 *
 * This class is auto generated by the swagger code generator program with proper templates of Keyclic.
 * https://github.com/swagger-api/swagger-codegen.git
 * https://github.com/Keyclic/app-sdk.git
 * Do not edit the class manually.
 */

import ApiClient from '../ApiClient';
import FeedbackEmbedded from './FeedbackEmbedded';
import FeedbackGeoCoordinates from './FeedbackGeoCoordinates';
import FeedbackLinks from './FeedbackLinks';

/**
 * The Feedback model module.
 * @module model/Feedback
 */
export default class Feedback {
    /**
     * Constructs a new "Feedback".
     * @alias module:model/Feedback
     * @class

     * @param geoCoordinates { module:model/FeedbackGeoCoordinates }

     * @param id { String }

     */
    constructor(

        geoCoordinates,

        id,

    ) {
        this.description = null;
        this.geoCoordinates = geoCoordinates;
        this.metadata = [];
        this.id = id;
        this.createdAt = null;
        this.type = null;
        this._public = null;
        this.state = [];
        this.links = null;
        this.embedded = null;

        this.geoCoordinatesType = FeedbackGeoCoordinates;
        this.linksType = FeedbackLinks;
        this.embeddedType = FeedbackEmbedded;
    }

    /**
    * Constructs a "Feedback" from a plain JavaScript object.
    * @param { object } data The plain JavaScript object bearing properties of interest.
    * @param { module:model/Feedback } object Optional instance to populate.
    * @return { module:model/Feedback } The populated "Feedback" instance.
    */
    static constructFromData(
        data,
        object = null,
    ) {
        if (data === null) {
            throw new Error('No data to build object');
        }

        if (object === null) {
            object = new Feedback();
        }

        if (data.hasOwnProperty('description')) {
            object.description = ApiClient.convertToType(data.description, 'String');
        }
        if (data.hasOwnProperty('geoCoordinates')) {
            object.geoCoordinates = ApiClient.convertToType(data.geoCoordinates, object.geoCoordinatesType);
        }
        if (data.hasOwnProperty('metadata')) {
            object.metadata = ApiClient.convertToType(data.metadata, '[\'String\']');
        }
        if (data.hasOwnProperty('id')) {
            object.id = ApiClient.convertToType(data.id, 'String');
        }
        if (data.hasOwnProperty('createdAt')) {
            object.createdAt = ApiClient.convertToType(data.createdAt, 'Date');
        }
        if (data.hasOwnProperty('type')) {
            object.type = ApiClient.convertToType(data.type, 'String');
        }
        if (data.hasOwnProperty('public')) {
            object._public = ApiClient.convertToType(data.public, 'Boolean');
        }
        if (data.hasOwnProperty('state')) {
            object.state = ApiClient.convertToType(data.state, '[\'String\']');
        }
        if (data.hasOwnProperty('_links')) {
            object.links = ApiClient.convertToType(data._links, object.linksType);
        }
        if (data.hasOwnProperty('_embedded')) {
            object.embedded = ApiClient.convertToType(data._embedded, object.embeddedType);
        }

        return object;
    }
}
