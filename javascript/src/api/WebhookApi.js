/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *  <techies@keyclic.com>
 *
 * This class is auto generated by the swagger code generator program with proper templates of Keyclic.
 * https://github.com/swagger-api/swagger-codegen.git
 * https://github.com/Keyclic/app-sdk.git
 * Do not edit the class manually.
 */

import ApiClient from '../ApiClient';
import CategoryPagination from '../model/CategoryPagination';
import Error from '../model/Error';
import Webhook from '../model/Webhook';
import WebhookPatch from '../model/WebhookPatch';

/**
 * Webhook service.
 * @module api/WebhookApi
 */
export default class WebhookApi extends ApiClient {
    /**
     * @class
     * { string } basePath To override basePath.
     * { object } headers Additional headers for the instance.
     * { int } timeout Number in seconds before timeout.
     */
    constructor(
        basePath = null,
        headers = null,
        timeout = null
    ) {
        super(basePath, headers, timeout);
    }

    /**
     * Retrieve all Webhook resources.
     * @param { String } xKeyclicApp
     * @param { String } organization The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { CategoryPagination }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion  
     * @param { String } businessActivity The identifier of the resource formatted as GUID string. 
     * @param { String } geoCoordinates One latitude and one longitude serialized and separated by a plus or a minus sign. 
     * @param { String } geoPoint One latitude and one longitude serialized and separated by a plus or a minus sign. 
     * @param { Number } page Page of the overview.  (default to 1)
     * @param { Number } limit Page of the overview.  (default to 10)
     * @param { module:model/String } order   (default to desc)
     * @param { Date } after  
     * @param { Date } before  
     * @param { String } searchColor  
     * @param { String } searchIcon  
     * @param { String } searchName  
     * @param { String } searchIdentificationNumber  
     */
    cgetWebhooksByOrganization(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = CategoryPagination;
        }

        let {
            xKeyclicApp,
            organization,
            acceptLanguage,
            xKeyclicAppVersion,
            businessActivity,
            geoCoordinates,
            geoPoint,
            page,
            limit,
            order,
            after,
            before,
            searchColor,
            searchIcon,
            searchName,
            searchIdentificationNumber,
        } = options;

        
        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling cgetWebhooksByOrganization');
        }
        
        // verify the required parameter 'organization' is set
        if (typeof organization === 'undefined' || organization === null) {
            throw new window.Error('Missing the required parameter "organization" when calling cgetWebhooksByOrganization');
        }
        

        
        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }
        
        // verify the default value of parameter 'page'
        if (typeof page === 'undefined' || page === null) {
            page = 1;  // eslint-disable-line quotes
        }
        
        // verify the default value of parameter 'limit'
        if (typeof limit === 'undefined' || limit === null) {
            limit = 10;  // eslint-disable-line quotes
        }
        
        // verify the default value of parameter 'order'
        if (typeof order === 'undefined' || order === null) {
            order = "desc";  // eslint-disable-line quotes
        }
        

        
        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }
        
        // verify the null value of parameter 'businessActivity'
        if (typeof businessActivity === 'undefined') {
            businessActivity = null;
        }
        
        // verify the null value of parameter 'geoCoordinates'
        if (typeof geoCoordinates === 'undefined') {
            geoCoordinates = null;
        }
        
        // verify the null value of parameter 'geoPoint'
        if (typeof geoPoint === 'undefined') {
            geoPoint = null;
        }
        
        // verify the null value of parameter 'after'
        if (typeof after === 'undefined') {
            after = null;
        }
        
        // verify the null value of parameter 'before'
        if (typeof before === 'undefined') {
            before = null;
        }
        
        // verify the null value of parameter 'searchColor'
        if (typeof searchColor === 'undefined') {
            searchColor = null;
        }
        
        // verify the null value of parameter 'searchIcon'
        if (typeof searchIcon === 'undefined') {
            searchIcon = null;
        }
        
        // verify the null value of parameter 'searchName'
        if (typeof searchName === 'undefined') {
            searchName = null;
        }
        
        // verify the null value of parameter 'searchIdentificationNumber'
        if (typeof searchIdentificationNumber === 'undefined') {
            searchIdentificationNumber = null;
        }
        

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling cgetWebhooksByOrganization');
        }

        let pathParams = {
            'organization': organization,
        };

        let bodyParam = null;

        let queryParams = {
            'business_activity': businessActivity,
            'geo_coordinates': geoCoordinates,
            'geo_point': geoPoint,
            'page': page,
            'limit': limit,
            'order': order,
            'after': after,
            'before': before,
            'search[color]': searchColor,
            'search[icon]': searchIcon,
            'search[name]': searchName,
            'search[identificationNumber]': searchIdentificationNumber,
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/organizations/{organization}/webhooks',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve one Webhook resource.
     * @param { String } xKeyclicApp
     * @param { String } webhook The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Webhook }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion  
     */
    getWebhook(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = Webhook;
        }

        let {
            xKeyclicApp,
            webhook,
            acceptLanguage,
            xKeyclicAppVersion,
        } = options;

        
        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling getWebhook');
        }
        
        // verify the required parameter 'webhook' is set
        if (typeof webhook === 'undefined' || webhook === null) {
            throw new window.Error('Missing the required parameter "webhook" when calling getWebhook');
        }
        

        
        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }
        

        
        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }
        

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling getWebhook');
        }

        let pathParams = {
            'webhook': webhook,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/webhooks/{webhook}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Edit one Webhook resource.
     * @param { String } xKeyclicApp
     * @param { String } webhook The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Webhook }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion  
     * @param { module:model/WebhookPatch } webhookPatch  
     */
    patchWebhook(
        returnType = null,
        options,
        credentials,
    ) {
        if (returnType === null) {
            returnType = Webhook;
        }

        let {
            xKeyclicApp,
            webhook,
            acceptLanguage,
            xKeyclicAppVersion,
            webhookPatch,
        } = options;

        
        // verify the required parameter 'xKeyclicApp' is set
        if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
            throw new window.Error('Missing the required parameter "xKeyclicApp" when calling patchWebhook');
        }
        
        // verify the required parameter 'webhook' is set
        if (typeof webhook === 'undefined' || webhook === null) {
            throw new window.Error('Missing the required parameter "webhook" when calling patchWebhook');
        }
        

        
        // verify the default value of parameter 'acceptLanguage'
        if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
            acceptLanguage = "fr-FR";  // eslint-disable-line quotes
        }
        

        
        // verify the null value of parameter 'xKeyclicAppVersion'
        if (typeof xKeyclicAppVersion === 'undefined') {
            xKeyclicAppVersion = null;
        }
        
        // verify the null value of parameter 'webhookPatch'
        if (typeof webhookPatch === 'undefined') {
            webhookPatch = null;
        }
        

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new window.Error('Missing the required parameter "credentials" when calling patchWebhook');
        }

        let pathParams = {
            'webhook': webhook,
        };

        let bodyParam = webhookPatch;

        let queryParams = {
        };

        let headerParams = {
            'accept-language': acceptLanguage,
            'x-keyclic-app': xKeyclicApp,
            'x-keyclic-app-version': xKeyclicAppVersion,
        };

        let credentialParams = credentials;

        let authNames = [
            'bearer',
        ];

        let contentTypes = [
            'application/json;charset=UTF-8',
        ];

        let accepts = [
            'application/hal+json;charset=UTF-8',
        ];

        return this.callApi(
            '/webhooks/{webhook}',
            'PATCH',
            pathParams,
            queryParams,
            headerParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

}
