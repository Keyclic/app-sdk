part of {{pubName}}.api;

{{#operations}}
class {{classname}} {
  {{classname}}([ApiClient apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;

  {{#operation}}
  /// {{summary}}
  ///
  /// {{notes}}
  Future<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {{nickname}}(
    {{#allParams}}{{#required}}{{{dataType}}} {{paramName}},{{/required}}{{/allParams}}
    {{#hasOptionalParams}}{
      {{#allParams}}{{^required}}{{{dataType}}} {{paramName}},{{/required}}{{/allParams}}
    }{{/hasOptionalParams}}
  ) async {
    // verify required params are set
    {{#allParams}}{{#required}}
    if ({{paramName}} == null) {
     throw ApiException(0, "Missing required param: {{paramName}}");
    }
    {{/required}}{{/allParams}}

    // create path and map variables
    final String path = "{{{path}}}".replaceAll("{format}","json"){{#pathParams}}.replaceAll("{" + "{{baseName}}" + "}", {{{paramName}}}.toString()){{/pathParams}};

    // query params
    final List<QueryParam> queryParams = [
    {{#queryParams}}
      {{^required}}
      if ({{paramName}} != null)
      {{/required}}
        ..._convertParametersForCollectionFormat("{{baseName}}", {{paramName}}{{#collectionFormat}}, collectionFormat: "{{collectionFormat}}"{{/collectionFormat}}),
      {{/queryParams}}
    ];

    // header params
    final Map<String, String> headerParams = {
      {{#headerParams}}
        {{#isDateTime}}
          if({{paramName}} is {{{dataType}}}) "{{baseName}}": {{paramName}}.toIso8601String(),
        {{/isDateTime}}
        {{^isDateTime}}
          "{{baseName}}": {{paramName}},
        {{/isDateTime}}
      {{/headerParams}}
    };

    final List<String> contentTypes = [
      {{#consumes}}"{{{mediaType}}}",{{/consumes}}
      "application/json",
    ];

    final List<String> authNames = [
      {{#authMethods}}"{{name}}", {{/authMethods}}
    ];

    {{#bodyParam}}
    final {{{dataType}}} postBody = {{paramName}};
    {{/bodyParam}}
    {{^bodyParam}}
    final Object postBody = null;
    {{/bodyParam}}

    final Response response = await apiClient.invokeAPI(
      path,
      '{{httpMethod}}',
      queryParams,
      postBody,
      headerParams,
      contentTypes[0],
      authNames,
    );

    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, response.body);
    }

    if (response.body == null) {
      return {{#returnType}}null{{/returnType}};
    }

    return
      {{#isListContainer}}
        {{#returnType}}(apiClient.deserialize(response.body, '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();{{/returnType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{#returnType}}{{{returnType}}}.from(apiClient.deserialize(response.body, '{{{returnType}}}')) {{/returnType}};
        {{/isMapContainer}}
        {{^isMapContainer}}
          {{#returnType}}apiClient.deserialize(response.body, '{{{returnType}}}') as {{{returnType}}} {{/returnType}};
        {{/isMapContainer}}
      {{/isListContainer}}
  }
  {{/operation}}
}
{{/operations}}
