/**
 * Keyclic API Reference
 * The Keyclic API is build around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer). <br/> Our API has resource oriented URLs and uses HTTP response codes to indicate API errors. We support CQRS and all API accesses are performed over HTTPS, allowing you to interact securely with our API from a client-side web application.<br/><br/> **Authentication** <br/> Authentication is performed thought [JSON Web Tokens](https://jwt.io). <br/> JSON Web Tokens are an open industry standard RFC 7519 method for representing claims securely between two parties.<br/>There are many [open source projects](https://auth0.com/opensource) built around JWT in several programming languages that you can use in your application.<br/><br/>**Errors** <br/>We uses conventional HTTP response codes to indicate the success or failure of an API request, errors are represented as JSON objects following the [vnd.error](https://github.com/blongden/vnd.error) standard.<br/><br/>**Integration**<br/>To make the API integration easy as possible we have a sandbox environment to interact securely with our API.
 *
 * OpenAPI spec version: 1.12.1
 * Contact: techies@keyclic.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Operation from '../model/Operation';
import OperationBody from '../model/OperationBody';
import OperationPagination from '../model/OperationPagination';
import OperationPatchDocument from '../model/OperationPatchDocument';
import OperationStatePatchDocument from '../model/OperationStatePatchDocument';

/**
 * Operation service.
 * @module api/OperationApi
 * @version 1.12.1
 */
export default class OperationApi extends ApiClient {
    /**
     * Constructs a new OperationApi.
     * 
     * @alias module:api/OperationApi
     * @class
     * @param {module:ApiClient} apiClient Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(
        basePath = null,
        headers = null,
        timeout = null
    ) {
        super(basePath, headers, timeout);
    }


    /**
     * Delete the given operation.
     * @param {String} operation The operation guid.
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Object} returnType The required type to return; can be a string for simple types or the constructor for a complex type (default to null).
     */
    callDelete(
        operation,
        credentials,
        returnType = null,
    ) {
        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new Error('Missing the required parameter "operation" when calling callDelete');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling callDelete');
        }

        let pathParams = {
            'operation': operation,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations/{operation}',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve all the operations for the given organization.
     * @param {String} organization 
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {OperationPagination} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param {Number} page The page number of the overview.  (default to 1)
     * @param {Number} limit The number of items per page.  (default to 20)
     * @param {String} before  
     * @param {String} after  
     */
    cgetByOrganization(
        organization,
        credentials,
        returnType = OperationPagination,
        page = 1,
        limit = 20,
        before = null,
        after = null,
    ) {
        // verify the required parameter 'organization' is set
        if (typeof organization === 'undefined' || organization === null) {
            throw new Error('Missing the required parameter "organization" when calling cgetByOrganization');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling cgetByOrganization');
        }

        let pathParams = {
            'organization': organization,
        };

        let bodyParam = null;

        let queryParams = {
            'page': page,
            'limit': limit,
            'before': before,
            'after': after,
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/organizations/{organization}/operations',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve all operations for the given person.
     * @param {String} person The person id.
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {OperationPagination} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param {Number} page The page number of the overview.  (default to 1)
     * @param {Number} limit The number of items per page.  (default to 20)
     * @param {String} order  
     * @param {String} search  
     * @param {String} before  
     * @param {String} after  
     */
    cgetByPerson(
        person,
        credentials,
        returnType = OperationPagination,
        page = 1,
        limit = 20,
        order = null,
        search = null,
        before = null,
        after = null,
    ) {
        // verify the required parameter 'person' is set
        if (typeof person === 'undefined' || person === null) {
            throw new Error('Missing the required parameter "person" when calling cgetByPerson');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling cgetByPerson');
        }

        let pathParams = {
            'person': person,
        };

        let bodyParam = null;

        let queryParams = {
            'page': page,
            'limit': limit,
            'order': order,
            'search': search,
            'before': before,
            'after': after,
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/people/{person}/operations',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve all operations for the given report.
     * @param {String} report 
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {OperationPagination} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param {Number} page The page number of the overview.  (default to 1)
     * @param {Number} limit The number of items per page.  (default to 20)
     * @param {String} order  
     * @param {String} search  
     * @param {String} before  
     * @param {String} after  
     */
    cgetByReport(
        report,
        credentials,
        returnType = OperationPagination,
        page = 1,
        limit = 20,
        order = null,
        search = null,
        before = null,
        after = null,
    ) {
        // verify the required parameter 'report' is set
        if (typeof report === 'undefined' || report === null) {
            throw new Error('Missing the required parameter "report" when calling cgetByReport');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling cgetByReport');
        }

        let pathParams = {
            'report': report,
        };

        let bodyParam = null;

        let queryParams = {
            'page': page,
            'limit': limit,
            'order': order,
            'search': search,
            'before': before,
            'after': after,
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/reports/{report}/operations',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Delete an image on the given operation.
     * @param {String} operation The operation guid.
     * @param {String} image The image guid.
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Object} returnType The required type to return; can be a string for simple types or the constructor for a complex type (default to null).
     */
    deleteImage(
        operation,
        image,
        credentials,
        returnType = null,
    ) {
        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new Error('Missing the required parameter "operation" when calling deleteImage');
        }
        // verify the required parameter 'image' is set
        if (typeof image === 'undefined' || image === null) {
            throw new Error('Missing the required parameter "image" when calling deleteImage');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling deleteImage');
        }

        let pathParams = {
            'operation': operation,
            'image': image,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations/{operation}/images/{image}',
            'DELETE',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Retrieve an operation.
     * @param {String} operation 
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Operation} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    get(
        operation,
        credentials,
        returnType = Operation,
    ) {
        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new Error('Missing the required parameter "operation" when calling get');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling get');
        }

        let pathParams = {
            'operation': operation,
        };

        let bodyParam = null;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations/{operation}',
            'GET',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Edit an operation.
     * • https://tools.ietf.org/html/rfc5789
     * @param {String} operation 
     * @param {Array.<module:model/OperationPatchDocument>} body A JSON document according the rfc5789 specification.
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Operation} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    patch(
        operation,
        body,
        credentials,
        returnType = Operation,
    ) {
        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new Error('Missing the required parameter "operation" when calling patch');
        }
        // verify the required parameter 'body' is set
        if (typeof body === 'undefined' || body === null) {
            throw new Error('Missing the required parameter "body" when calling patch');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling patch');
        }

        let pathParams = {
            'operation': operation,
        };

        let bodyParam = body;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations/{operation}',
            'PATCH',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Apply a state transition on the given operation.
     * Apply transition for an operation.  For more informations about PATCH implementation, please refer to the RFC.  • https://tools.ietf.org/html/rfc5789  Required transition must be send as a JSON patch document.
     * @param {String} operation 
     * @param {Array.<module:model/OperationStatePatchDocument>} body A JSON document according the rfc5789 specification.
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Operation} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    patchState(
        operation,
        body,
        credentials,
        returnType = Operation,
    ) {
        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new Error('Missing the required parameter "operation" when calling patchState');
        }
        // verify the required parameter 'body' is set
        if (typeof body === 'undefined' || body === null) {
            throw new Error('Missing the required parameter "body" when calling patchState');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling patchState');
        }

        let pathParams = {
            'operation': operation,
        };

        let bodyParam = body;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations/{operation}/state',
            'PATCH',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Create an new operation.
     * @param {module:model/OperationBody} body 
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Operation} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    post(
        body,
        credentials,
        returnType = Operation,
    ) {
        // verify the required parameter 'body' is set
        if (typeof body === 'undefined' || body === null) {
            throw new Error('Missing the required parameter "body" when calling post');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling post');
        }

        let pathParams = {
        };

        let bodyParam = body;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

    /**
     * Add a new image on the given operation.
     * @param {String} operation The operation guid.
     * @param {String} text A text described the commentary.
     * @param {Object} credentials The required credentials with good properties to use different types of authentication.
     * @param {Operation} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     */
    postImage(
        operation,
        text,
        credentials,
        returnType = Operation,
    ) {
        // verify the required parameter 'operation' is set
        if (typeof operation === 'undefined' || operation === null) {
            throw new Error('Missing the required parameter "operation" when calling postImage');
        }
        // verify the required parameter 'text' is set
        if (typeof text === 'undefined' || text === null) {
            throw new Error('Missing the required parameter "text" when calling postImage');
        }

        if (typeof credentials === 'undefined' || credentials === null) {
            throw new Error('Missing the required parameter "credentials" when calling postImage');
        }

        let pathParams = {
            'operation': operation,
        };

        let bodyParam = text;

        let queryParams = {
        };

        let headerParams = {
        };

        let formParams = {
        };

        let credentialParams = credentials;

        let authNames = [
            'JWT',
        ];

        let contentTypes = [
            'application/json',
        ];

        let accepts = [
            'application/json',
        ];

        return this.callApi(
            '/operations/{operation}/images',
            'POST',
            pathParams,
            queryParams,
            headerParams,
            formParams,
            bodyParam,
            authNames,
            credentialParams,
            contentTypes,
            accepts,
            returnType
        );
    }

}
