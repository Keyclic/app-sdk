/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.23.2
 * Contact: techies@keyclic.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Device } from '../model/device';
import { DeviceData } from '../model/deviceData';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { DeviceServiceInterface }                            from './device.serviceInterface';


@Injectable()
export class DeviceService implements DeviceServiceInterface {

    protected basePath = 'https://api.keyclic.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Remove one Device resource.
     * 
     * @param xKeyclicApp 
     * @param person The identifier of the resource formatted as GUID string.
     * @param device 
     * @param acceptLanguage 
     * @param xKeyclicAppVersion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDeviceByPersonAndDevice(xKeyclicApp: string, person: string, device: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDeviceByPersonAndDevice(xKeyclicApp: string, person: string, device: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDeviceByPersonAndDevice(xKeyclicApp: string, person: string, device: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDeviceByPersonAndDevice(xKeyclicApp: string, person: string, device: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (xKeyclicApp === null || xKeyclicApp === undefined) {
            throw new Error('Required parameter xKeyclicApp was null or undefined when calling deleteDeviceByPersonAndDevice.');
        }
        if (person === null || person === undefined) {
            throw new Error('Required parameter person was null or undefined when calling deleteDeviceByPersonAndDevice.');
        }
        if (device === null || device === undefined) {
            throw new Error('Required parameter device was null or undefined when calling deleteDeviceByPersonAndDevice.');
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('accept-language', String(acceptLanguage));
        }
        if (xKeyclicApp !== undefined && xKeyclicApp !== null) {
            headers = headers.set('x-keyclic-app', String(xKeyclicApp));
        }
        if (xKeyclicAppVersion !== undefined && xKeyclicAppVersion !== null) {
            headers = headers.set('x-keyclic-app-version', String(xKeyclicAppVersion));
        }

        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/people/${encodeURIComponent(String(person))}/devices/${encodeURIComponent(String(device))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create one Device resource.
     * 
     * @param xKeyclicApp 
     * @param person The identifier of the resource formatted as GUID string.
     * @param acceptLanguage 
     * @param xKeyclicAppVersion 
     * @param deviceData 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postDeviceByPerson(xKeyclicApp: string, person: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, deviceData?: DeviceData, observe?: 'body', reportProgress?: boolean): Observable<Device>;
    public postDeviceByPerson(xKeyclicApp: string, person: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, deviceData?: DeviceData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Device>>;
    public postDeviceByPerson(xKeyclicApp: string, person: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, deviceData?: DeviceData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Device>>;
    public postDeviceByPerson(xKeyclicApp: string, person: string, acceptLanguage?: 'fr-FR' | 'en-US', xKeyclicAppVersion?: string, deviceData?: DeviceData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (xKeyclicApp === null || xKeyclicApp === undefined) {
            throw new Error('Required parameter xKeyclicApp was null or undefined when calling postDeviceByPerson.');
        }
        if (person === null || person === undefined) {
            throw new Error('Required parameter person was null or undefined when calling postDeviceByPerson.');
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('accept-language', String(acceptLanguage));
        }
        if (xKeyclicApp !== undefined && xKeyclicApp !== null) {
            headers = headers.set('x-keyclic-app', String(xKeyclicApp));
        }
        if (xKeyclicAppVersion !== undefined && xKeyclicAppVersion !== null) {
            headers = headers.set('x-keyclic-app-version', String(xKeyclicAppVersion));
        }

        // authentication (bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Device>(`${this.basePath}/people/${encodeURIComponent(String(person))}/devices`,
            deviceData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
