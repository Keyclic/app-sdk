#!/usr/bin/env bash

#set -x  # print terminal command

# This script generates Swagger codegen client
# then it generates app-sdk from templates and swagger.json file
# then it fixes src and test files.
CURRENT_DIR=$(pwd)

function cleanup {
    cd ${CURRENT_DIR}
    echo "Don't forget to publish on Github and NPM."
}

SWAGGER_FILE="$1"
if [ ! -f "${SWAGGER_FILE}" ]; then
    SWAGGER_FILE="https://api.keyclic.com/swagger.json"
fi
echo "Use file ${SWAGGER_FILE} as definition API."
echo

rm -rf ${CURRENT_DIR}/javascript-es6
docker run --rm --volume ${PWD}:/local --user "$(id -u)":"$(id -g)" \
    swaggerapi/swagger-codegen-cli \
    generate \
    --config /local/options.javascript-es6.json \
    --input-spec ${SWAGGER_FILE} \
    --lang javascript \
    --output /local/javascript-es6 \
    --template-dir /local/javascript-es6-templates

rm -rf ${CURRENT_DIR}/dart
docker run --rm --volume ${PWD}:/local --user "$(id -u)":"$(id -g)" \
    swaggerapi/swagger-codegen-cli \
    generate \
    --config /local/options.dart.json \
    --input-spec ${SWAGGER_FILE} \
    --lang dart \
    --output /local/dart

# old options example
#    -DdebugModels \
#    -DdebugOperations \
#    generate \
#    --config options.dart.json \
#    --input-spec ${SWAGGER_FILE} \
#    --lang dart \
#    --output dart \
#    > .codegen.dart.log

cd ${CURRENT_DIR}/javascript-es6 || exit
npm install
npm run standard
npm run build

# When the script exits call cleanup function.
trap cleanup EXIT
