/**
 * Keyclic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *  <techies@keyclic.com>
 *
 * This class is auto generated by the swagger code generator program with proper templates of Keyclic.
 * https://github.com/swagger-api/swagger-codegen.git
 * https://github.com/Keyclic/app-sdk.git
 * Do not edit the class manually.
 */

import ApiClient from '../ApiClient'
import ActivityPagination from '../model/ActivityPagination'
import CommentData from '../model/CommentData'
import Error from '../model/Error'
import Feedback from '../model/Feedback'
import Operation from '../model/Operation'

/**
 * Comment service.
 * @module api/CommentApi
 */
export default class CommentApi extends ApiClient {
  /**
     * @class
     * { string } basePath To override basePath.
     * { object } headers Additional headers for the instance.
     * { int } timeout Number in seconds before timeout.
     */
  constructor (
    basePath = null,
    headers = null,
    timeout = null
  ) {
    super(basePath, headers, timeout)
  }

  /**
     * Retrieve all Comment resources.
     * @param { String } xKeyclicApp
     * @param { String } feedback The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { ActivityPagination }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     */
  cgetCommentsByFeedback (
    returnType = null,
    options,
    credentials
  ) {
    if (returnType === null) {
      returnType = ActivityPagination
    }

    let {
      xKeyclicApp,
      feedback,
      acceptLanguage,
      xKeyclicAppVersion
    } = options

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
      throw new window.Error('Missing the required parameter "xKeyclicApp" when calling cgetCommentsByFeedback')
    }

    // verify the required parameter 'feedback' is set
    if (typeof feedback === 'undefined' || feedback === null) {
      throw new window.Error('Missing the required parameter "feedback" when calling cgetCommentsByFeedback')
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
      acceptLanguage = "fr-FR" // eslint-disable-line quotes
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === 'undefined') {
      xKeyclicAppVersion = null
    }

    if (typeof credentials === 'undefined' || credentials === null) {
      throw new window.Error('Missing the required parameter "credentials" when calling cgetCommentsByFeedback')
    }

    let pathParams = {
      'feedback': feedback
    }

    let bodyParam = null

    let queryParams = {
    }

    let headerParams = {
      'accept-language': acceptLanguage,
      'x-keyclic-app': xKeyclicApp,
      'x-keyclic-app-version': xKeyclicAppVersion
    }

    let credentialParams = credentials

    let authNames = [
      'bearer'
    ]

    let contentTypes = [
      'application/json;charset=UTF-8'
    ]

    let accepts = [
      'application/hal+json;charset=UTF-8'
    ]

    return this.callApi(
      '/feedbacks/{feedback}/comments',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
     * Retrieve all Comment resources.
     * @param { String } xKeyclicApp
     * @param { String } operation The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { ActivityPagination }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     */
  cgetCommentsByOperation (
    returnType = null,
    options,
    credentials
  ) {
    if (returnType === null) {
      returnType = ActivityPagination
    }

    let {
      xKeyclicApp,
      operation,
      acceptLanguage,
      xKeyclicAppVersion
    } = options

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
      throw new window.Error('Missing the required parameter "xKeyclicApp" when calling cgetCommentsByOperation')
    }

    // verify the required parameter 'operation' is set
    if (typeof operation === 'undefined' || operation === null) {
      throw new window.Error('Missing the required parameter "operation" when calling cgetCommentsByOperation')
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
      acceptLanguage = "fr-FR" // eslint-disable-line quotes
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === 'undefined') {
      xKeyclicAppVersion = null
    }

    if (typeof credentials === 'undefined' || credentials === null) {
      throw new window.Error('Missing the required parameter "credentials" when calling cgetCommentsByOperation')
    }

    let pathParams = {
      'operation': operation
    }

    let bodyParam = null

    let queryParams = {
    }

    let headerParams = {
      'accept-language': acceptLanguage,
      'x-keyclic-app': xKeyclicApp,
      'x-keyclic-app-version': xKeyclicAppVersion
    }

    let credentialParams = credentials

    let authNames = [
      'bearer'
    ]

    let contentTypes = [
      'application/json;charset=UTF-8'
    ]

    let accepts = [
      'application/hal+json;charset=UTF-8'
    ]

    return this.callApi(
      '/operations/{operation}/comments',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
     * Create one Comment resource.
     * @param { String } xKeyclicApp
     * @param { String } feedback The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Feedback }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     * @param { module:model/CommentData } commentData
     */
  postCommentByFeedback (
    returnType = null,
    options,
    credentials
  ) {
    if (returnType === null) {
      returnType = Feedback
    }

    let {
      xKeyclicApp,
      feedback,
      acceptLanguage,
      xKeyclicAppVersion,
      commentData
    } = options

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
      throw new window.Error('Missing the required parameter "xKeyclicApp" when calling postCommentByFeedback')
    }

    // verify the required parameter 'feedback' is set
    if (typeof feedback === 'undefined' || feedback === null) {
      throw new window.Error('Missing the required parameter "feedback" when calling postCommentByFeedback')
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
      acceptLanguage = "fr-FR" // eslint-disable-line quotes
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === 'undefined') {
      xKeyclicAppVersion = null
    }

    // verify the null value of parameter 'commentData'
    if (typeof commentData === 'undefined') {
      commentData = null
    }

    if (typeof credentials === 'undefined' || credentials === null) {
      throw new window.Error('Missing the required parameter "credentials" when calling postCommentByFeedback')
    }

    let pathParams = {
      'feedback': feedback
    }

    let bodyParam = commentData

    let queryParams = {
    }

    let headerParams = {
      'accept-language': acceptLanguage,
      'x-keyclic-app': xKeyclicApp,
      'x-keyclic-app-version': xKeyclicAppVersion
    }

    let credentialParams = credentials

    let authNames = [
      'bearer'
    ]

    let contentTypes = [
      'application/json;charset=UTF-8'
    ]

    let accepts = [
      'application/hal+json;charset=UTF-8'
    ]

    return this.callApi(
      '/feedbacks/{feedback}/comments',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    )
  }

  /**
     * Create one Comment resource.
     * @param { String } xKeyclicApp
     * @param { String } operation The identifier of the resource formatted as GUID string.
     * @param { Object } credentials The required credentials with good properties to use different types of authentication.
     * @param { Operation }  returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param { module:model/String } acceptLanguage   (default to fr-FR)
     * @param { String } xKeyclicAppVersion
     * @param { module:model/CommentData } commentData
     */
  postCommentByOperation (
    returnType = null,
    options,
    credentials
  ) {
    if (returnType === null) {
      returnType = Operation
    }

    let {
      xKeyclicApp,
      operation,
      acceptLanguage,
      xKeyclicAppVersion,
      commentData
    } = options

    // verify the required parameter 'xKeyclicApp' is set
    if (typeof xKeyclicApp === 'undefined' || xKeyclicApp === null) {
      throw new window.Error('Missing the required parameter "xKeyclicApp" when calling postCommentByOperation')
    }

    // verify the required parameter 'operation' is set
    if (typeof operation === 'undefined' || operation === null) {
      throw new window.Error('Missing the required parameter "operation" when calling postCommentByOperation')
    }

    // verify the default value of parameter 'acceptLanguage'
    if (typeof acceptLanguage === 'undefined' || acceptLanguage === null) {
      acceptLanguage = "fr-FR" // eslint-disable-line quotes
    }

    // verify the null value of parameter 'xKeyclicAppVersion'
    if (typeof xKeyclicAppVersion === 'undefined') {
      xKeyclicAppVersion = null
    }

    // verify the null value of parameter 'commentData'
    if (typeof commentData === 'undefined') {
      commentData = null
    }

    if (typeof credentials === 'undefined' || credentials === null) {
      throw new window.Error('Missing the required parameter "credentials" when calling postCommentByOperation')
    }

    let pathParams = {
      'operation': operation
    }

    let bodyParam = commentData

    let queryParams = {
    }

    let headerParams = {
      'accept-language': acceptLanguage,
      'x-keyclic-app': xKeyclicApp,
      'x-keyclic-app-version': xKeyclicAppVersion
    }

    let credentialParams = credentials

    let authNames = [
      'bearer'
    ]

    let contentTypes = [
      'application/json;charset=UTF-8'
    ]

    let accepts = [
      'application/hal+json;charset=UTF-8'
    ]

    return this.callApi(
      '/operations/{operation}/comments',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      bodyParam,
      authNames,
      credentialParams,
      contentTypes,
      accepts,
      returnType
    )
  }
}
